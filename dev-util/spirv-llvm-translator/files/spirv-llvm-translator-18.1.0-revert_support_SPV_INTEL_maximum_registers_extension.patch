reverted:
--- b/include/LLVMSPIRVExtensions.inc
+++ a/include/LLVMSPIRVExtensions.inc
@@ -69,4 +69,3 @@
 EXT(SPV_INTEL_fpga_latency_control)
 EXT(SPV_INTEL_fp_max_error)
 EXT(SPV_INTEL_cache_controls)
-EXT(SPV_INTEL_maximum_registers)
reverted:
--- b/lib/SPIRV/SPIRVReader.cpp
+++ a/lib/SPIRV/SPIRVReader.cpp
@@ -4306,48 +4306,6 @@
       F->setMetadata(kSPIR2MD::IntelFPGAIPInterface,
                      MDNode::get(*Context, InterfaceMDVec));
     }
-    if (auto *EM = BF->getExecutionMode(ExecutionModeMaximumRegistersINTEL)) {
-      NamedMDNode *ExecModeMD =
-          M->getOrInsertNamedMetadata(kSPIRVMD::ExecutionMode);
-
-      SmallVector<Metadata *, 4> ValueVec;
-      ValueVec.push_back(ConstantAsMetadata::get(F));
-      ValueVec.push_back(
-          ConstantAsMetadata::get(getUInt32(M, EM->getExecutionMode())));
-      ValueVec.push_back(
-          ConstantAsMetadata::get(getUInt32(M, EM->getLiterals()[0])));
-      ExecModeMD->addOperand(MDNode::get(*Context, ValueVec));
-    }
-    if (auto *EM = BF->getExecutionMode(ExecutionModeMaximumRegistersIdINTEL)) {
-      NamedMDNode *ExecModeMD =
-          M->getOrInsertNamedMetadata(kSPIRVMD::ExecutionMode);
-
-      SmallVector<Metadata *, 4> ValueVec;
-      ValueVec.push_back(ConstantAsMetadata::get(F));
-      ValueVec.push_back(
-          ConstantAsMetadata::get(getUInt32(M, EM->getExecutionMode())));
-
-      auto *ExecOp = BF->getModule()->getValue(EM->getLiterals()[0]);
-      ValueVec.push_back(
-          MDNode::get(*Context, ConstantAsMetadata::get(cast<ConstantInt>(
-                                    transValue(ExecOp, nullptr, nullptr)))));
-      ExecModeMD->addOperand(MDNode::get(*Context, ValueVec));
-    }
-    if (auto *EM =
-            BF->getExecutionMode(ExecutionModeNamedMaximumRegistersINTEL)) {
-      NamedMDNode *ExecModeMD =
-          M->getOrInsertNamedMetadata(kSPIRVMD::ExecutionMode);
-
-      SmallVector<Metadata *, 4> ValueVec;
-      ValueVec.push_back(ConstantAsMetadata::get(F));
-      ValueVec.push_back(
-          ConstantAsMetadata::get(getUInt32(M, EM->getExecutionMode())));
-
-      assert(EM->getLiterals()[0] == 0 &&
-             "Invalid named maximum number of registers");
-      ValueVec.push_back(MDString::get(*Context, "AutoINTEL"));
-      ExecModeMD->addOperand(MDNode::get(*Context, ValueVec));
-    }
   }
   NamedMDNode *MemoryModelMD =
       M->getOrInsertNamedMetadata(kSPIRVMD::MemoryModel);
reverted:
--- b/lib/SPIRV/SPIRVWriter.cpp
+++ a/lib/SPIRV/SPIRVWriter.cpp
@@ -977,10 +977,7 @@
 
   transFPGAFunctionMetadata(BF, F);
 
+  transFunctionMetadataAsUserSemanticDecoration(BF, F);
-  if (BM->isAllowedToUseExtension(ExtensionID::SPV_INTEL_maximum_registers))
-    transFunctionMetadataAsExecutionMode(BF, F);
-  else
-    transFunctionMetadataAsUserSemanticDecoration(BF, F);
 
   transAuxDataInst(BF, F);
 
@@ -1121,38 +1118,6 @@
     transMetadataDecorations(FDecoMD, BF);
 }
 
-void LLVMToSPIRVBase::transFunctionMetadataAsExecutionMode(SPIRVFunction *BF,
-                                                           Function *F) {
-  SmallVector<MDNode *, 1> RegisterAllocModeMDs;
-  F->getMetadata("RegisterAllocMode", RegisterAllocModeMDs);
-
-  for (unsigned I = 0; I < RegisterAllocModeMDs.size(); I++) {
-    auto *RegisterAllocMode = RegisterAllocModeMDs[I]->getOperand(0).get();
-    if (isa<MDString>(RegisterAllocMode)) {
-      StringRef Str = getMDOperandAsString(RegisterAllocModeMDs[I], 0);
-      NamedMaximumNumberOfRegisters NamedValue =
-          SPIRVNamedMaximumNumberOfRegistersNameMap::rmap(Str.str());
-      BF->addExecutionMode(BM->add(new SPIRVExecutionMode(
-          OpExecutionMode, BF, ExecutionModeNamedMaximumRegistersINTEL,
-          NamedValue)));
-    } else if (isa<MDNode>(RegisterAllocMode)) {
-      auto *RegisterAllocNodeMDOp =
-          getMDOperandAsMDNode(RegisterAllocModeMDs[I], 0);
-      int Num = getMDOperandAsInt(RegisterAllocNodeMDOp, 0);
-      auto *Const =
-          BM->addConstant(transType(Type::getInt32Ty(F->getContext())), Num);
-      BF->addExecutionMode(BM->add(new SPIRVExecutionModeId(
-          BF, ExecutionModeMaximumRegistersIdINTEL, Const->getId())));
-    } else {
-      int64_t RegisterAllocVal =
-          mdconst::dyn_extract<ConstantInt>(RegisterAllocMode)->getZExtValue();
-      BF->addExecutionMode(BM->add(new SPIRVExecutionMode(
-          OpExecutionMode, BF, ExecutionModeMaximumRegistersINTEL,
-          RegisterAllocVal)));
-    }
-  }
-}
-
 void LLVMToSPIRVBase::transFunctionMetadataAsUserSemanticDecoration(
     SPIRVFunction *BF, Function *F) {
   if (auto *RegisterAllocModeMD = F->getMetadata("RegisterAllocMode")) {
reverted:
--- b/lib/SPIRV/SPIRVWriter.h
+++ a/lib/SPIRV/SPIRVWriter.h
@@ -131,7 +131,6 @@
   SPIRVFunction *transFunctionDecl(Function *F);
   void transVectorComputeMetadata(Function *F);
   void transFPGAFunctionMetadata(SPIRVFunction *BF, Function *F);
-  void transFunctionMetadataAsExecutionMode(SPIRVFunction *BF, Function *F);
   void transFunctionMetadataAsUserSemanticDecoration(SPIRVFunction *BF,
                                                      Function *F);
   void transAuxDataInst(SPIRVFunction *BF, Function *F);
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVEntry.cpp
+++ a/lib/SPIRV/libSPIRV/SPIRVEntry.cpp
@@ -660,9 +660,6 @@
   case ExecutionModeSchedulerTargetFmaxMhzINTEL:
   case ExecutionModeRegisterMapInterfaceINTEL:
   case ExecutionModeStreamingInterfaceINTEL:
-  case ExecutionModeMaximumRegistersINTEL:
-  case ExecutionModeMaximumRegistersIdINTEL:
-  case ExecutionModeNamedMaximumRegistersINTEL:
     WordLiterals.resize(1);
     break;
   default:
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVEntry.h
+++ a/lib/SPIRV/libSPIRV/SPIRVEntry.h
@@ -696,17 +696,6 @@
     }
   }
 
-  std::optional<ExtensionID> getRequiredExtension() const override {
-    switch (static_cast<unsigned>(ExecMode)) {
-    case ExecutionModeMaximumRegistersINTEL:
-    case ExecutionModeMaximumRegistersIdINTEL:
-    case ExecutionModeNamedMaximumRegistersINTEL:
-      return ExtensionID::SPV_INTEL_maximum_registers;
-    default:
-      return {};
-    }
-  }
-
 protected:
   _SPIRV_DCL_ENCDEC
   SPIRVExecutionModeKind ExecMode;
@@ -768,11 +757,6 @@
       return IsDenorm(EMK) || IsRoundingMode(EMK) || IsFPMode(EMK) ||
              IsOtherFP(EMK);
     };
-    auto IsMaxRegisters = [&](auto EMK) {
-      return EMK == ExecutionModeMaximumRegistersINTEL ||
-             EMK == ExecutionModeMaximumRegistersIdINTEL ||
-             EMK == ExecutionModeNamedMaximumRegistersINTEL;
-    };
     auto IsCompatible = [&](SPIRVExecutionMode *EM0, SPIRVExecutionMode *EM1) {
       if (EM0->getTargetId() != EM1->getTargetId())
         return true;
@@ -786,8 +770,7 @@
         return true;
       return !(IsDenorm(EMK0) && IsDenorm(EMK1)) &&
              !(IsRoundingMode(EMK0) && IsRoundingMode(EMK1)) &&
+             !(IsFPMode(EMK0) && IsFPMode(EMK1));
-             !(IsFPMode(EMK0) && IsFPMode(EMK1)) &&
-             !(IsMaxRegisters(EMK0) && IsMaxRegisters(EMK1));
     };
     for (auto I = ExecModes.begin(); I != ExecModes.end(); ++I) {
       assert(IsCompatible(ExecMode, (*I).second) &&
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVEnum.h
+++ a/lib/SPIRV/libSPIRV/SPIRVEnum.h
@@ -291,12 +291,6 @@
                {CapabilityFPGAKernelAttributesINTEL});
   ADD_VEC_INIT(ExecutionModeNamedBarrierCountINTEL,
                {CapabilityVectorComputeINTEL});
-  ADD_VEC_INIT(ExecutionModeMaximumRegistersINTEL,
-               {CapabilityRegisterLimitsINTEL});
-  ADD_VEC_INIT(ExecutionModeMaximumRegistersIdINTEL,
-               {CapabilityRegisterLimitsINTEL});
-  ADD_VEC_INIT(ExecutionModeNamedMaximumRegistersINTEL,
-               {CapabilityRegisterLimitsINTEL});
 }
 
 template <> inline void SPIRVMap<SPIRVMemoryModelKind, SPIRVCapVec>::init() {
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVIsValidEnum.h
+++ a/lib/SPIRV/libSPIRV/SPIRVIsValidEnum.h
@@ -73,9 +73,6 @@
   case ExecutionModelCallableKHR:
   case ExecutionModeRegisterMapInterfaceINTEL:
   case ExecutionModeStreamingInterfaceINTEL:
-  case ExecutionModeMaximumRegistersINTEL:
-  case ExecutionModeMaximumRegistersIdINTEL:
-  case ExecutionModeNamedMaximumRegistersINTEL:
     return true;
   default:
     return false;
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h
+++ a/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h
@@ -637,7 +637,6 @@
   add(CapabilityFPGAArgumentInterfacesINTEL, "FPGAArgumentInterfacesINTEL");
   add(CapabilityFPGALatencyControlINTEL, "FPGALatencyControlINTEL");
   add(CapabilityFPMaxErrorINTEL, "FPMaxErrorINTEL");
-  add(CapabilityRegisterLimitsINTEL, "RegisterLimitsINTEL");
   // From spirv_internal.hpp
   add(internal::CapabilityFastCompositeINTEL, "FastCompositeINTEL");
   add(internal::CapabilityOptNoneINTEL, "OptNoneINTEL");
@@ -692,13 +691,6 @@
 }
 SPIRV_DEF_NAMEMAP(HostAccessQualifier, SPIRVHostAccessQualifierNameMap)
 
-template <>
-inline void SPIRVMap<NamedMaximumNumberOfRegisters, std::string>::init() {
-  add(NamedMaximumNumberOfRegistersAutoINTEL, "AutoINTEL");
-}
-SPIRV_DEF_NAMEMAP(NamedMaximumNumberOfRegisters,
-                  SPIRVNamedMaximumNumberOfRegistersNameMap);
-
 } /* namespace SPIRV */
 
 #endif // SPIRV_LIBSPIRV_SPIRVNAMEMAPENUM_H
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVStream.cpp
+++ a/lib/SPIRV/libSPIRV/SPIRVStream.cpp
@@ -147,7 +147,6 @@
 SPIRV_DEF_ENCDEC(NonSemanticAuxDataOpKind)
 SPIRV_DEF_ENCDEC(InitializationModeQualifier)
 SPIRV_DEF_ENCDEC(HostAccessQualifier)
-SPIRV_DEF_ENCDEC(NamedMaximumNumberOfRegisters)
 SPIRV_DEF_ENCDEC(LinkageType)
 
 // Read a string with padded 0's at the end so that they form a stream of
reverted:
--- b/lib/SPIRV/libSPIRV/SPIRVStream.h
+++ a/lib/SPIRV/libSPIRV/SPIRVStream.h
@@ -231,7 +231,6 @@
 SPIRV_DEC_ENCDEC(NonSemanticAuxDataOpKind)
 SPIRV_DEC_ENCDEC(InitializationModeQualifier)
 SPIRV_DEC_ENCDEC(HostAccessQualifier)
-SPIRV_DEC_ENCDEC(NamedMaximumNumberOfRegisters)
 SPIRV_DEC_ENCDEC(LinkageType)
 
 const SPIRVEncoder &operator<<(const SPIRVEncoder &O, const std::string &Str);
reverted:
--- b/spirv-headers-tag.conf
+++ a/spirv-headers-tag.conf
@@ -1 +1 @@
+1c6bb2743599e6eb6f37b2969acc0aef812e32e3
-b73e168ca5e123dcf3dea8a34b19a5130f421ae1
reverted:
--- b/test/extensions/INTEL/SPV_INTEL_maximum_registers/registerallocmode_maxreg_extension.ll
+++ /dev/null
@@ -1,85 +0,0 @@
-; RUN: llvm-as %s -o %t.bc
-; RUN: llvm-spirv -spirv-text --spirv-ext=+SPV_INTEL_maximum_registers %t.bc
-; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
-; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_INTEL_maximum_registers -o %t.spv
-; RUN: llvm-spirv -r %t.spv -spirv-target-env=SPV-IR -o - | llvm-dis -o %t.rev.ll
-; RUN: FileCheck < %t.rev.ll %s --check-prefix=CHECK-LLVM
-
-; CHECK-SPIRV: EntryPoint [[#]] [[#FUNC0:]] "main_l3"
-; CHECK-SPIRV: EntryPoint [[#]] [[#FUNC1:]] "main_l6"
-; CHECK-SPIRV: EntryPoint [[#]] [[#FUNC2:]] "main_l9"
-; CHECK-SPIRV: EntryPoint [[#]] [[#FUNC3:]] "main_l13"
-; CHECK-SPIRV: EntryPoint [[#]] [[#FUNC4:]] "main_l19"
-
-; CHECK-SPIRV: ExecutionMode [[#FUNC0]] 6461 2
-; CHECK-SPIRV: ExecutionMode [[#FUNC1]] 6461 1
-; CHECK-SPIRV: ExecutionMode [[#FUNC2]] 6463 0
-; CHECK-SPIRV: ExecutionModeId [[#FUNC3]] 6462 [[#Const3:]]
-; CHECK-SPIRV: TypeInt [[#TypeInt:]] 32 0
-; CHECK-SPIRV: Constant [[#TypeInt]] [[#Const3]] 3
-
-; CHECK-SPIRV-NOT: ExecutionMode [[#FUNC4]]
-
-; CHECK-LLVM: !spirv.ExecutionMode = !{![[#FLAG0:]], ![[#FLAG1:]], ![[#FLAG2:]], ![[#FLAG3:]]}
-; CHECK-LLVM: ![[#FLAG0]] = !{ptr @main_l3, i32 6461, i32 2}
-; CHECK-LLVM: ![[#FLAG1]] = !{ptr @main_l6, i32 6461, i32 1}
-; CHECK-LLVM: ![[#FLAG2]] = !{ptr @main_l9, i32 6463, !"AutoINTEL"}
-; CHECK-LLVM: ![[#FLAG3]] = !{ptr @main_l13, i32 6462, ![[#VAL:]]}
-; CHECK-LLVM: ![[#VAL]] = !{i32 3}
-
-target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
-target triple = "spir64"
-
-; Function Attrs: noinline nounwind optnone
-define weak dso_local spir_kernel void @main_l3() #0 !RegisterAllocMode !10 {
-newFuncRoot:
-  ret void
-}
-
-; Function Attrs: noinline nounwind optnone
-define weak dso_local spir_kernel void @main_l6() #0 !RegisterAllocMode !11 {
-newFuncRoot:
-  ret void
-}
-
-; Function Attrs: noinline nounwind optnone
-define weak dso_local spir_kernel void @main_l9() #0 !RegisterAllocMode !12 {
-newFuncRoot:
-  ret void
-}
-
-; Function Attrs: noinline nounwind optnone
-define weak dso_local spir_kernel void @main_l13() #0 !RegisterAllocMode !13 {
-newFuncRoot:
-  ret void
-}
-
-; Function Attrs: noinline nounwind optnone
-define weak dso_local spir_kernel void @main_l19() #0 {
-newFuncRoot:
-  ret void
-}
-
-attributes #0 = { noinline nounwind optnone }
-
-
-!opencl.compiler.options = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
-!spirv.Source = !{!2, !3, !3, !3, !3, !3, !2, !3, !2, !2, !2, !2, !2, !2, !2, !2, !2, !2, !2, !2, !2, !2}
-!llvm.module.flags = !{!4, !5, !6, !7, !8}
-!spirv.MemoryModel = !{!9, !9, !9, !9, !9, !9}
-!spirv.ExecutionMode = !{}
-
-!0 = !{}
-!2 = !{i32 4, i32 200000}
-!3 = !{i32 3, i32 200000}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"openmp", i32 50}
-!6 = !{i32 7, !"openmp-device", i32 50}
-!7 = !{i32 8, !"PIC Level", i32 2}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{i32 2, i32 2}
-!10 = !{i32 2}
-!11 = !{i32 1}
-!12 = !{!"AutoINTEL"}
-!13 = !{!14}
-!14 = !{i32 3}
